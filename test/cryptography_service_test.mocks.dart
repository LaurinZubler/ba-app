// Mocks generated by Mockito 5.4.4 from annotations
// in ba_app/test/cryptography_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:ba_app/application/service/bls_service.dart' as _i3;
import 'package:ba_app/domain/keyPair/key_pair_model.dart' as _i2;
import 'package:ba_app/infrastructure/key_repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeKeyPair_0 extends _i1.SmartFake implements _i2.KeyPair {
  _FakeKeyPair_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BLSService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBLSService extends _i1.Mock implements _i3.BLSService {
  MockBLSService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.KeyPair createKeyPair() => (super.noSuchMethod(
        Invocation.method(
          #createKeyPair,
          [],
        ),
        returnValue: _FakeKeyPair_0(
          this,
          Invocation.method(
            #createKeyPair,
            [],
          ),
        ),
      ) as _i2.KeyPair);

  @override
  String sign(
    String? message,
    List<String>? privateKeysHex,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [
            message,
            privateKeysHex,
          ],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #sign,
            [
              message,
              privateKeysHex,
            ],
          ),
        ),
      ) as String);

  @override
  bool verify(
    String? signature,
    String? message,
    List<String>? publicKeysHex,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verify,
          [
            signature,
            message,
            publicKeysHex,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [KeyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyRepository extends _i1.Mock implements _i5.KeyRepository {
  MockKeyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.KeyPair>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i6.Future<List<_i2.KeyPair>>.value(<_i2.KeyPair>[]),
      ) as _i6.Future<List<_i2.KeyPair>>);

  @override
  _i6.Future<void> save(_i2.KeyPair? keyPair) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [keyPair],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
