import 'package:upsi_core/application/dto/infectionEvent/infection_event_dto.dart';
import 'package:upsi_core/global.dart';
import 'package:upsi_user/application/service/upsi_contract_service.dart';
import 'package:upsi_user/data/i_blockchain_service.dart';
import 'package:upsi_user/domain/repository/i_block_repository.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:web3dart/web3dart.dart';

import 'upsi_contract_service_test.mocks.dart';

@GenerateMocks([IBlockchainService, IBlockRepository])
void main() {
  late MockIBlockchainService mockBlockchainService;
  late MockIBlockRepository mockBlockRepository;
  late UpsiContractService upsiContractService;

  setUp(() {
    mockBlockchainService = MockIBlockchainService();
    mockBlockRepository = MockIBlockRepository();
    upsiContractService = UpsiContractService(mockBlockchainService, mockBlockRepository);
  });

  group('getNewInfectionEvents()', () {
    test('success', () async {
      final event = FilterEvent(removed: false, logIndex: 1, transactionIndex: 1, transactionHash: "transactionHash", blockHash: "blockHash", blockNum: 1, address: EthereumAddress.fromHex(Global.UPSI_CONTRACT_ADDRESS), data: "0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000666603e600000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000010534d494c494e475f53594e44524f4d4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000062307838323934373161363736373661336435633164626264643864643430383739643234306162323335646435316333626339643238323031393762626639376230653063313033313230366632353130313438326236656162623731626537346300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000406534386661653363323331373466323731363437366435396564306330313637393334303763376633323931313830363031626133336663343565623835323800000000000000000000000000000000000000000000000000000000000000c23078386461643939663334623736336431393436336238393662653139333934636461626162386562643339643839396431323366383734353138643433313563626235313465313139623836336664303763343761346364383562316235303935303538376432366231653166386132333866366465326231383634313434383039333133356165663636626533376339636364336465353463306233333664613730333231376332383565323534626264386265313332616261383361633261000000000000000000000000000000000000000000000000000000000000", topics: [Global.UPSI_INFECTION_EVENT_TOPIC]);
      final expectedInfectionEvent = InfectionEvent(infection: "SMILING_SYNDROME", infectee: ["0x829471a67676a3d5c1dbbdd8dd40879d240ab235dd51c3bc9d2820197bbf97b0e0c1031206f25101482b6eabb71be74c"], tester: "e48fae3c23174f2716476d59ed0c016793407c7f3291180601ba33fc45eb8528", testTime: DateTime.parse("2024-06-09 19:35:02Z"), signature: "0x8dad99f34b763d19463b896be19394cdabab8ebd39d899d123f874518d4315cbb514e119b863fd07c47a4cd85b1b50950587d26b1e1f8a238f6de2b18641448093135aef66be37c9ccd3de54c0b336da703217c285e254bbd8be132aba83ac2a");

      when(mockBlockRepository.get()).thenAnswer((_) async => 1);
      when(mockBlockchainService.getLogs(any, any, any, any)).thenAnswer((_) async => [event]);
      when(mockBlockchainService.getLatestBlockNumber()).thenAnswer((_) async => 1);

      final infectionEvents = await upsiContractService.getNewInfectionEvents();
      expect(infectionEvents.length, 1);
      expect(infectionEvents[0], expectedInfectionEvent);

      verify(mockBlockRepository.get()).called(1);
      verify(mockBlockRepository.save(any)).called(1);
      verify(mockBlockchainService.getLogs(any, any, any, any)).called(1);
      verifyNever(mockBlockchainService.getLatestBlockNumber());
    });

    test('multiple events', () async {
      final event1 = FilterEvent(removed: false, logIndex: 1, transactionIndex: 1, transactionHash: "transactionHash", blockHash: "blockHash", blockNum: 2, address: EthereumAddress.fromHex(Global.UPSI_CONTRACT_ADDRESS), data: "0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000666603e600000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000010534d494c494e475f53594e44524f4d4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000062307838323934373161363736373661336435633164626264643864643430383739643234306162323335646435316333626339643238323031393762626639376230653063313033313230366632353130313438326236656162623731626537346300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000406534386661653363323331373466323731363437366435396564306330313637393334303763376633323931313830363031626133336663343565623835323800000000000000000000000000000000000000000000000000000000000000c23078386461643939663334623736336431393436336238393662653139333934636461626162386562643339643839396431323366383734353138643433313563626235313465313139623836336664303763343761346364383562316235303935303538376432366231653166386132333866366465326231383634313434383039333133356165663636626533376339636364336465353463306233333664613730333231376332383565323534626264386265313332616261383361633261000000000000000000000000000000000000000000000000000000000000", topics: [Global.UPSI_INFECTION_EVENT_TOPIC]);
      final event2 = FilterEvent(removed: false, logIndex: 1, transactionIndex: 1, transactionHash: "transactionHash", blockHash: "blockHash", blockNum: 3, address: EthereumAddress.fromHex(Global.UPSI_CONTRACT_ADDRESS), data: "0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000666603e600000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000010534d494c494e475f53594e44524f4dc23078386461643939663334623736336431393436336238393662653139333934636461626162386562643339643839396431323366383734353138643433313563626235313465313139623836336664303763343761346364383562316235303935303538376432366231653166386132333866366465326231383634313434383039333133356165663636626533376339636364336465353463306233333664613730333231376332383565323534626264386265313332616261383361633261000000000000000000000000000000000000000000000000000000000000", topics: [Global.UPSI_INFECTION_EVENT_TOPIC]);
      final expectedInfectionEvent = InfectionEvent(infection: "SMILING_SYNDROME", infectee: ["0x829471a67676a3d5c1dbbdd8dd40879d240ab235dd51c3bc9d2820197bbf97b0e0c1031206f25101482b6eabb71be74c"], tester: "e48fae3c23174f2716476d59ed0c016793407c7f3291180601ba33fc45eb8528", testTime: DateTime.parse("2024-06-09 19:35:02Z"), signature: "0x8dad99f34b763d19463b896be19394cdabab8ebd39d899d123f874518d4315cbb514e119b863fd07c47a4cd85b1b50950587d26b1e1f8a238f6de2b18641448093135aef66be37c9ccd3de54c0b336da703217c285e254bbd8be132aba83ac2a");

      when(mockBlockRepository.get()).thenAnswer((_) async => 1);
      when(mockBlockchainService.getLogs(any, any, any, any)).thenAnswer((_) async => [event1, event2]);
      when(mockBlockchainService.getLatestBlockNumber()).thenAnswer((_) async => 1);

      final infectionEvents = await upsiContractService.getNewInfectionEvents();
      expect(infectionEvents.length, 2);
      expect(infectionEvents[0], expectedInfectionEvent);
      expect(infectionEvents[1], expectedInfectionEvent);

      verify(mockBlockRepository.get()).called(1);
      verify(mockBlockRepository.save(3)).called(1);
      verifyNever(mockBlockRepository.save(2));
      verify(mockBlockchainService.getLogs(any, any, any, any)).called(1);
      verifyNever(mockBlockchainService.getLatestBlockNumber());
    });

    test('no last block', () async {
      final event = FilterEvent(removed: false, logIndex: 1, transactionIndex: 1, transactionHash: "transactionHash", blockHash: "blockHash", blockNum: 1, address: EthereumAddress.fromHex(Global.UPSI_CONTRACT_ADDRESS), data: "0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000666603e600000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000010534d494c494e475f53594e44524f4dc23078386461643939663334623736336431393436336238393662653139333934636461626162386562643339643839396431323366383734353138643433313563626235313465313139623836336664303763343761346364383562316235303935303538376432366231653166386132333866366465326231383634313434383039333133356165663636626533376339636364336465353463306233333664613730333231376332383565323534626264386265313332616261383361633261000000000000000000000000000000000000000000000000000000000000", topics: [Global.UPSI_INFECTION_EVENT_TOPIC]);
      final expectedInfectionEvent = InfectionEvent(infection: "SMILING_SYNDROME", infectee: ["0x829471a67676a3d5c1dbbdd8dd40879d240ab235dd51c3bc9d2820197bbf97b0e0c1031206f25101482b6eabb71be74c"], tester: "e48fae3c23174f2716476d59ed0c016793407c7f3291180601ba33fc45eb8528", testTime: DateTime.parse("2024-06-09 19:35:02Z"), signature: "0x8dad99f34b763d19463b896be19394cdabab8ebd39d899d123f874518d4315cbb514e119b863fd07c47a4cd85b1b50950587d26b1e1f8a238f6de2b18641448093135aef66be37c9ccd3de54c0b336da703217c285e254bbd8be132aba83ac2a");

      when(mockBlockRepository.get()).thenAnswer((_) async => Global.NO_BLOCKS_CHECKED_BLOCKNUMBER);
      when(mockBlockchainService.getLogs(any, any, any, any)).thenAnswer((_) async => [event]);
      when(mockBlockchainService.getLatestBlockNumber()).thenAnswer((_) async => 1);

      final infectionEvents = await upsiContractService.getNewInfectionEvents();
      expect(infectionEvents.length, 1);
      expect(infectionEvents[0], expectedInfectionEvent);

      verify(mockBlockRepository.get()).called(1);
      verify(mockBlockRepository.save(any)).called(2);
      verify(mockBlockchainService.getLogs(any, any, any, any)).called(1);
      verify(mockBlockchainService.getLatestBlockNumber()).called(1);
    });

    test('no new infection events', () async {
      when(mockBlockRepository.get()).thenAnswer((_) async => 1);
      when(mockBlockchainService.getLogs(any, any, any, any)).thenAnswer((_) async => []);
      when(mockBlockchainService.getLatestBlockNumber()).thenAnswer((_) async => 1);

      final infectionEvents = await upsiContractService.getNewInfectionEvents();
      expect(infectionEvents.length, 0);

      verify(mockBlockRepository.get()).called(1);
      verifyNever(mockBlockRepository.save(any));
      verify(mockBlockchainService.getLogs(any, any, any, any)).called(1);
      verifyNever(mockBlockchainService.getLatestBlockNumber());
    });
  });
}
